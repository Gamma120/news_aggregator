from sqlalchemy import *
from datetime import datetime, timedelta
from .utils import *


class Database():
    
    def __init__(self, db_path: str):
        set_directories()
        self.url = 'sqlite:///'+db_path
        self.engine = create_engine(self.url, echo=True, future=True)
        self.meta = MetaData(bind=self.engine)
        if not os.path.exists(db_path):
            self.create_tables()
    
    def create_tables(self):
        # uniqueness of name in a channel
        # uniqueness of rss url in a channel
        # file name is auto-generated by utils methode nametofile
        rss_flux = Table('rss_flux', self.meta,
                         Column('id', Integer, primary_key=True),
                         Column('name', String, nullable=False),
                         Column('file_name', String, nullable=False),
                         Column('url', String, nullable=False),
                         Column('channel', String, nullable=False),
                         Column('last_item', String),
                         Column('last_time_fetched', DateTime),
                         Column('update_rate', Interval),
                         UniqueConstraint('name', 'channel'))
        
        channels_filters = Table('channels_filters', self.meta,
                                Column('id', Integer, primary_key=True),
                                Column('filter', String, nullable=False),
                                Column('channel', String, ForeignKey('rss_flux.channel')),
                                UniqueConstraint('filter', 'channel'))
        
        self.meta.create_all(self.engine)
    
    def get_table(self, table_name: str) -> Table:
        return Table(table_name, self.meta, autoload_with=self.engine)     
    
    def get_rss_row(self, row_id: dict) -> dict:
        with self.engine.connect() as conn:
            rss_flux = self.get_table('rss_flux')
            ins = rss_flux.select().where(and_(
                rss_flux.c.name == row_id.get('name'),
                rss_flux.c.channel == row_id.get('channel'))
            )
            res = conn.execute(ins)
            row = res.mappings().all()
            assert len(row) == 1
            return row[0]
      
    def get_rss_flux_list(self):
        with self.engine.connect() as conn:
            rss_flux = self.get_table('rss_flux')
            select = rss_flux.select()
            res = conn.execute(select)
            return [_row.name for _row in res]
    
    def get_table_list(self):
        return [table for table in self.meta.tables]
    
    def get_column_list(self, table_name: str):
        table = self.get_table(table_name)
        return table.columns.keys() 
           
    def add_rss_flux(self, rss_dict: dict): # TODO : add multiple rss_flux
        """
        add a new row in the table rss_flux
        trigger by the discord command $add_rss
        """
        with self.engine.connect() as conn:
            rss_flux = self.get_table('rss_flux')
            ins = rss_flux.insert().values(name = rss_dict.get('name'),
                                        file_name = nametofile(rss_dict.get('name'))+'.xml',
                                        url = rss_dict.get('url'),
                                        channel = rss_dict.get('channel'),
                                        last_time_fetched = rss_dict.get('last_time_fetched'),
                                        update_rate = rss_dict.get('update_rate'))
            res = conn.execute(ins)
            conn.commit()
            
    def remove_rss_flux(self, name: str, channel: str):
        """
        remove a row in the table rss_flux
        trigger by the discord command $remove_rss
        """
        with self.engine.connect() as conn:
            rss_flux = self.get_table('rss_flux')
            ins = rss_flux.delete().where(and_(
                rss_flux.c.name == name,
                rss_flux.c.channel == channel
            ))
            conn.execute(ins)
            conn.commit()
        
    def edit_rss_flux(self, name: str, channel: str, changes: dict):
        """
        edit a row in the table rss_flux
        trigger by the discord command $edit_rss
        """
        with self.engine.connect() as conn:
            rss_flux = self.get_table('rss_flux')
            ins = rss_flux.update().where(and_(
                rss_flux.c.name == name,
                rss_flux.c.channel == channel   
            )).values(changes)
            conn.execute(ins)
            conn.commit()
    
    def to_fetch(self):
        """
        return a list of rss flux that need to be fetched
        """
        now = datetime.now()
        with self.engine.connect() as conn:
            rss_flux =  self.get_table('rss_flux')
            ins = rss_flux.select().where(or_(
                rss_flux.c.last_time_fetched == None,
                rss_flux.c.update_rate == None,
                rss_flux.c.last_time_fetched >= now)
            )
            res = conn.execute(ins)
            rows_list = []
            for row in res:
                rows_list.append(row._mapping)
            return rows_list